/**
 * Helper de Integraci√≥n para Asistente de OpenAI
 * Permite al Asistente de OpenAI interactuar con funciones externas
 */

const calendarApi = require('./calendar-api');
const axios = require('axios');

/**
 * Procesa las llamadas a funciones del Asistente de OpenAI
 * @param {string} functionName - Nombre de la funci√≥n a llamar
 * @param {Object} parameters - Par√°metros para la funci√≥n
 * @returns {Promise<Object>} - Resultado de la funci√≥n
 */
async function processFunctionCall(functionName, parameters) {
  console.log(`üîÑ Llamada a funci√≥n externa: ${functionName}`, parameters);

  try {
    // Validar businessId - asegurar que siempre exista
    if (!parameters.businessId) {
      console.error(`‚ùå Error: No se proporcion√≥ businessId para la funci√≥n ${functionName}`);
      return {
        success: false,
        error: `Se requiere un ID de negocio para ejecutar esta operaci√≥n. Por favor, contacta al soporte.`
      };
    }

    // Funciones de calendario
    if (functionName === 'check_calendar_availability') {
      return await calendarApi.check_calendar_availability(
        parameters.businessId,
        parameters.date
      );
    }
    
    if (functionName === 'create_calendar_event') {
      // Asegurarse que el businessId tambi√©n se incluya en los detalles del evento
      if (parameters.eventDetails && !parameters.eventDetails.businessId) {
        parameters.eventDetails.businessId = parameters.businessId;
      }
      
      return await calendarApi.create_calendar_event(
        parameters.businessId,
        parameters.eventDetails
      );
    }
    
    if (functionName === 'find_customer_appointments') {
      return await calendarApi.find_customer_appointments(
        parameters.businessId,
        parameters.phoneNumber
      );
    }
    
    if (functionName === 'delete_calendar_event') {
      return await calendarApi.delete_calendar_event(
        parameters.businessId,
        parameters.eventId
      );
    }
    
    // Nuevas funciones para el asistente
    if (functionName === 'get_calendar_info') {
      return await calendarApi.get_assistant_calendar_info(
        parameters.businessId,
        parameters.date
      );
    }
    
    if (functionName === 'schedule_appointment') {
      // Asegurarse que el businessId tambi√©n se incluya en los detalles del evento
      if (parameters.eventDetails && !parameters.eventDetails.businessId) {
        parameters.eventDetails.businessId = parameters.businessId;
      }
      
      return await calendarApi.create_calendar_event(
        parameters.businessId,
        parameters.eventDetails
      );
    }
    
    // Agregar nueva funci√≥n al procesador
    if (functionName === 'get_relative_dates') {
      try {
        // Llamar al endpoint que creamos
        const response = await axios.get('http://localhost:3095/api/date/relative');
        return response.data;
      } catch (error) {
        console.error('‚ùå Error obteniendo fechas relativas:', error);
        return {
          success: false,
          error: `Error obteniendo fechas relativas: ${error.message}`
        };
      }
    }
    
    // Funci√≥n no encontrada
    return {
      success: false,
      error: `Funci√≥n no implementada: ${functionName}`
    };
  } catch (error) {
    console.error(`‚ùå Error procesando funci√≥n ${functionName}:`, error);
    return {
      success: false,
      error: `Error ejecutando ${functionName}: ${error.message}`
    };
  }
}

// Definiciones de las funciones disponibles para OpenAI
const toolDefinitions = [
  {
    type: "function",
    function: {
      name: "check_calendar_availability",
      description: "Verifica qu√© horarios est√°n disponibles en una fecha espec√≠fica (zona horaria: Ciudad de M√©xico)",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "ID del negocio asociado al calendario (string/UUID)"
          },
          date: {
            type: "string",
            description: "Fecha en formato YYYY-MM-DD (considera que usamos la zona horaria de Ciudad de M√©xico)"
          }
        },
        required: ["businessId", "date"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "create_calendar_event",
      description: "Crea un evento (cita) en el calendario del negocio (zona horaria: Ciudad de M√©xico)",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "ID del negocio (string/UUID)"
          },
          eventDetails: {
            type: "object",
            properties: {
              date: {
                type: "string",
                description: "Fecha de la cita (YYYY-MM-DD) en zona horaria de Ciudad de M√©xico"
              },
              time: {
                type: "string",
                description: "Hora de la cita (HH:MM en formato 24h) en zona horaria de Ciudad de M√©xico"
              },
              phone: {
                type: "string",
                description: "Tel√©fono del cliente"
              },
              name: {
                type: "string",
                description: "Nombre del cliente (opcional)"
              },
              email: {
                type: "string",
                description: "Email del cliente (opcional)"
              },
              title: {
                type: "string",
                description: "T√≠tulo de la cita (opcional)"
              },
              description: {
                type: "string",
                description: "Descripci√≥n adicional (opcional)"
              },
              location: {
                type: "string",
                description: "Ubicaci√≥n de la cita (opcional)"
              }
            },
            required: ["date", "time", "phone"]
          }
        },
        required: ["businessId", "eventDetails"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "find_customer_appointments",
      description: "Busca todas las citas programadas para un cliente por su n√∫mero de tel√©fono",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "ID del negocio (string/UUID)"
          },
          phoneNumber: {
            type: "string",
            description: "N√∫mero de tel√©fono del cliente (se obtiene autom√°ticamente del remitente, no es necesario solicitarlo)"
          }
        },
        required: ["businessId"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "delete_calendar_event",
      description: "Elimina un evento del calendario (cancela una cita)",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "ID del negocio (string/UUID)"
          },
          eventId: {
            type: "string",
            description: "ID del evento a eliminar (string)"
          }
        },
        required: ["businessId", "eventId"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "get_calendar_info",
      description: "Obtiene los horarios de atenci√≥n, tipos de cita y disponibilidad para una fecha espec√≠fica (zona horaria: Ciudad de M√©xico)",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "El ID del negocio para obtener la informaci√≥n del calendario"
          },
          date: {
            type: "string",
            description: "La fecha para consultar disponibilidad en formato YYYY-MM-DD (zona horaria de Ciudad de M√©xico)",
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
          }
        },
        required: ["businessId", "date"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "schedule_appointment",
      description: "Agenda una nueva cita en el calendario del negocio (zona horaria: Ciudad de M√©xico)",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "El ID del negocio donde se agenda la cita"
          },
          eventDetails: {
            type: "object",
            properties: {
              date: {
                type: "string",
                description: "La fecha de la cita en formato YYYY-MM-DD (zona horaria de Ciudad de M√©xico)",
                pattern: "^\\d{4}-\\d{2}-\\d{2}$"
              },
              time: {
                type: "string",
                description: "La hora de la cita en formato HH:MM (24 horas) en zona horaria de Ciudad de M√©xico",
                pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
              },
              phone: {
                type: "string",
                description: "El n√∫mero de tel√©fono del cliente (se obtiene autom√°ticamente del remitente, no es necesario solicitarlo)"
              },
              name: {
                type: "string",
                description: "Opcional. El nombre del cliente"
              },
              email: {
                type: "string",
                description: "Opcional. El email del cliente"
              },
              title: {
                type: "string",
                description: "Opcional. El t√≠tulo o tipo de la cita"
              },
              description: {
                type: "string",
                description: "Opcional. Descripci√≥n o notas adicionales para la cita"
              },
              appointmentTypeId: {
                type: "string",
                description: "Opcional. El ID del tipo de cita si aplica"
              }
            },
            required: ["date", "time"]
          }
        },
        required: ["eventDetails"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "get_relative_dates",
      description: "Obtiene las fechas relativas (hoy, ma√±ana, etc.) en la zona horaria de Ciudad de M√©xico. Usa esta funci√≥n PRIMERO cuando el usuario mencione fechas relativas como 'ma√±ana' o 'pr√≥xima semana' para calcular correctamente las fechas.",
      parameters: {
        type: "object",
        properties: {
          businessId: {
            type: "string",
            description: "ID del negocio (opcional, se incluye autom√°ticamente)"
          }
        },
        required: []
      }
    }
  }
];

// Instrucciones para guiar al asistente en el uso de las funciones
const toolInstructions = `
Para manejar citas y consultar disponibilidad, debes usar las funciones de calendario cuando el usuario pregunte por disponibilidad o quiera agendar, modificar o cancelar una cita.

Instrucciones:
1. PRIMERO, cuando un usuario mencione fechas relativas como "ma√±ana", "pasado ma√±ana", o "la pr√≥xima semana", SIEMPRE usa la funci√≥n get_relative_dates para obtener las fechas correctas en la zona horaria de M√©xico.
2. Cuando un usuario pregunte por disponibilidad ("¬øqu√© horarios hay disponibles?", "¬øtienen citas para ma√±ana?"), usa get_calendar_info con la fecha correcta obtenida de get_relative_dates.
3. Si el usuario quiere agendar una cita, primero verifica disponibilidad con get_calendar_info y luego usa schedule_appointment.
4. Si el usuario pregunta por sus citas, usa find_customer_appointments.
5. Si el usuario quiere cancelar una cita, usa delete_calendar_event.

Importante:
- NUNCA calcules fechas relativas por tu cuenta. SIEMPRE usa get_relative_dates para obtener la fecha correcta.
- Siempre confirma los detalles antes de agendar (fecha, hora, nombre).
- Usa el formato correcto para fechas (YYYY-MM-DD) y horas (HH:MM).
- NUNCA PIDAS EL TEL√âFONO DEL USUARIO. El sistema lo captura autom√°ticamente del mensaje de WhatsApp.
- Para agendar citas, NUNCA preguntes por el n√∫mero de tel√©fono, el sistema lo inyecta autom√°ticamente.
- NO inventes horarios disponibles. SIEMPRE consulta primero con get_calendar_info.
- TODAS las fechas y horas se manejan en la zona horaria de Ciudad de M√©xico (America/Mexico_City).
- Antes de ofrecer un horario, verifica que sea v√°lido para el d√≠a de la semana correcto seg√∫n la fecha.`;

module.exports = {
  processFunctionCall,
  toolDefinitions,
  toolInstructions
}; 